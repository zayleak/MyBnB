DROP TABLE IF EXISTS HostComment CASCADE;
DROP TABLE IF EXISTS ListingComment CASCADE;
DROP TABLE IF EXISTS RenterComment CASCADE;
DROP TABLE IF EXISTS Comment CASCADE;
DROP TABLE IF EXISTS Cancellation CASCADE;
DROP TABLE IF EXISTS Booking CASCADE;
DROP TABLE IF EXISTS Availability CASCADE;
DROP TABLE IF EXISTS Amenity CASCADE;
DROP TABLE IF EXISTS Listing CASCADE;
DROP TABLE IF EXISTS User CASCADE;
CREATE TABLE User (uid INT AUTO_INCREMENT PRIMARY KEY, sin VARCHAR(20) NOT NULL, name VARCHAR(100) NOT NULL, dob DATE NOT NULL, occupation VARCHAR(100) NOT NULL, address VARCHAR(255) NOT NULL, password VARCHAR(100) NOT NULL, username VARCHAR(50) NOT NULL, card_number VARCHAR(16) NOT NULL, UNIQUE KEY username (username));
CREATE TABLE Listing (lid INT AUTO_INCREMENT PRIMARY KEY, type VARCHAR(50) NOT NULL, postal VARCHAR(10) NOT NULL, address VARCHAR(200) NOT NULL, latitude DECIMAL(10,8) NOT NULL, longitude DECIMAL(11,8) NOT NULL, city VARCHAR(100) NOT NULL, country VARCHAR(100) NOT NULL, uid INT NOT NULL, FOREIGN KEY (uid) REFERENCES User (uid) ON DELETE CASCADE);
CREATE TABLE Amenity (amenity_id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL, lid INT NOT NULL, FOREIGN KEY (lid) REFERENCES Listing (lid) ON DELETE CASCADE);
CREATE TABLE Availability (availability_id INT AUTO_INCREMENT PRIMARY KEY, lid INT NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL, day_price DECIMAL(10,2) NOT NULL, FOREIGN KEY (lid) REFERENCES Listing (lid) ON DELETE CASCADE, CHECK ((day_price >= 0)), CHECK ((start_date <= end_date)));
CREATE TABLE Booking (bid INT AUTO_INCREMENT PRIMARY KEY, start_date DATE NOT NULL, end_date DATE NOT NULL, price DECIMAL(10,2) NOT NULL, lid INT, uid INT NOT NULL, host INT, finished INT NOT NULL, card_number VARCHAR(16) NOT NULL, FOREIGN KEY (lid) REFERENCES Listing (lid) ON DELETE SET NULL, FOREIGN KEY (uid) REFERENCES User (uid) ON DELETE CASCADE, FOREIGN KEY (host) REFERENCES User (uid) ON DELETE SET NULL, CHECK (((finished >= 0) AND (finished <= 3))), CHECK ((start_date <= end_date)), CHECK ((price >= 0)));
CREATE TABLE Cancellation (bid INT PRIMARY KEY, cancel_date DATE NOT NULL, FOREIGN KEY (bid) REFERENCES Booking (bid) ON DELETE CASCADE);
CREATE TABLE Comment (cid INT AUTO_INCREMENT PRIMARY KEY, body VARCHAR(500) NOT NULL, rating INT NOT NULL, commenter INT NOT NULL, FOREIGN KEY (commenter) REFERENCES User (uid) ON DELETE CASCADE, CHECK (((rating >= 1) AND (rating <= 5))));
CREATE TABLE RenterComment (cid INT PRIMARY KEY, renter INT NOT NULL, FOREIGN KEY (cid) REFERENCES Comment (cid) ON DELETE CASCADE, FOREIGN KEY (renter) REFERENCES User (uid) ON DELETE CASCADE);
CREATE TABLE ListingComment (cid INT PRIMARY KEY, lid INT NOT NULL, FOREIGN KEY (cid) REFERENCES Comment (cid) ON DELETE CASCADE, FOREIGN KEY (lid) REFERENCES Listing (lid) ON DELETE CASCADE);
CREATE TABLE HostComment (cid INT PRIMARY KEY, host INT NOT NULL, FOREIGN KEY (cid) REFERENCES Comment (cid) ON DELETE CASCADE, FOREIGN KEY (host) REFERENCES User (uid) ON DELETE CASCADE);
CREATE TRIGGER update_availability_after_booking AFTER INSERT ON Booking FOR EACH ROW BEGIN DECLARE start_overlap DATE; DECLARE end_overlap DATE; DECLARE price_overlap DECIMAL(10, 2); SELECT start_date, end_date, day_price INTO start_overlap, end_overlap, price_overlap FROM Availability WHERE lid = NEW.lid AND start_date <= NEW.start_date AND end_date >= NEW.end_date LIMIT 1; DELETE FROM Availability WHERE lid = NEW.lid AND start_date <= NEW.start_date AND end_date >= NEW.end_date; IF NEW.start_date <> start_overlap THEN INSERT INTO Availability (lid, start_date, end_date, day_price) VALUES (NEW.lid, start_overlap, NEW.start_date - INTERVAL 1 DAY, price_overlap); END IF; IF NEW.end_date <> end_overlap THEN INSERT INTO Availability (lid, start_date, end_date, day_price) VALUES (NEW.lid, NEW.end_date + INTERVAL 1 DAY, end_overlap, price_overlap); END IF; END;
CREATE TRIGGER check_availability_overlap BEFORE INSERT ON Availability FOR EACH ROW BEGIN IF EXISTS ( SELECT * FROM Availability WHERE lid = NEW.lid AND start_date <= NEW.end_date AND end_date >= NEW.start_date ) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Overlapping availability date range'; END IF; END; 
CREATE TRIGGER before_insert_availability BEFORE INSERT ON Availability FOR EACH ROW BEGIN IF EXISTS ( SELECT * FROM Booking WHERE NEW.lid = Booking.lid AND (NEW.start_date <= Booking.end_date AND NEW.start_date >= Booking.start_date) AND Booking.finished != 0 ) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Availability date range overlaps with existing booking.'; END IF; END; 
CREATE TRIGGER check_rental_history_renter BEFORE INSERT ON HostComment FOR EACH ROW BEGIN DECLARE renter_count INT; DECLARE commenter2 INT; SELECT commenter INTO commenter2 FROM Comment WHERE cid = NEW.cid; SELECT COUNT(*) INTO renter_count FROM Booking WHERE uid = commenter2 AND host = NEW.host AND finished = 0 AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH); IF renter_count = 0 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Renter has not rented from this host recently'; END IF; END;
CREATE TRIGGER check_rental_history_host BEFORE INSERT ON RenterComment FOR EACH ROW BEGIN DECLARE host_count INT; DECLARE commenter2 INT; SELECT commenter INTO commenter2 FROM Comment WHERE cid = NEW.cid; SELECT COUNT(*) INTO host_count FROM Booking WHERE uid = NEW.renter AND host = commenter2 AND finished = 0 AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH); IF host_count = 0 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Renter has not rented from this host recently'; END IF; END;
CREATE TRIGGER check_rental_history_listing BEFORE INSERT ON ListingComment FOR EACH ROW BEGIN DECLARE listing_count INT; DECLARE commenter2 INT; SELECT commenter INTO commenter2 FROM Comment WHERE cid = NEW.cid; SELECT COUNT(*) INTO listing_count FROM Booking WHERE lid = NEW.lid AND commenter2 = uid AND finished = 0 AND end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH); IF listing_count = 0 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Renter has not completed a stay here'; END IF; END;
